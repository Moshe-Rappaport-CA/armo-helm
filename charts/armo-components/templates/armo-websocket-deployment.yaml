{{- if .Values.armoWebsocket.enabled  }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.armoWebsocket.name }}
  namespace: {{ .Values.armoNameSpace }}
  labels:
    app: {{ .Values.armoWebsocket.name }}
    tier: {{ .Values.global.namespaceTier}}
spec:
  replicas: {{ .Values.armoWebsocket.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.armoWebsocket.name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      tier: {{ .Values.global.namespaceTier}}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Values.armoWebsocket.name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        helm.sh/revision: "{{ .Release.Revision }}"
        tier: {{ .Values.global.namespaceTier}}
        app: {{ .Values.armoWebsocket.name }}
    spec:
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      - name: {{ toYaml .Values.imagePullSecrets }}
      {{- end }}
      containers:
        - name: {{ .Values.armoWebsocket.name }}
          image: "{{ .Values.armoWebsocket.image.repository }}:{{ .Values.armoWebsocket.image.tag }}"
          imagePullPolicy: {{ .Values.armoWebsocket.image.pullPolicy }}
          ports:
            - name: "trigger-port"
              containerPort: 4002
              protocol: TCP
            - name: "readiness-port"
              containerPort: 8000
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /v1/readiness
              port: readiness-port
            initialDelaySeconds: 10
            periodSeconds: 5
          resources:
{{ toYaml .Values.armoWebsocket.resources | indent 12 }}
          env:
            - name: CA_NAMESPACE
              value: "{{ .Values.armoNameSpace }}"
            - name: CA_VULN_SCAN_SCHEDULE
              value: "{{ .Values.armoWebsocket.scanSchedule}}"
            - name: CA_POSTURE_SCAN_SCHEDULE
              value: ""
            - name: CA_SYSTEM_MODE
              value: "{{ .Values.global.armoSystemMode }}"
            {{- range .Values.armoWebsocket.env }}
            - name: {{ .name  }}
              value: "{{ .value }}"
            {{- end }}
          args:
            - -alsologtostderr
            - -v=4
            - 2>&1
          volumeMounts:
            - name: {{ .Values.global.beConfig }}
              mountPath: /etc/config
              readOnly: true
          securityContext:
{{- toYaml .Values.global.ContainerSecurityContext | nindent 12}}
      volumes:
        - name: {{ .Values.global.beConfig }}
          configMap:
            name: {{ .Values.global.beConfig }}
            items:
            - key: "clusterData"
              path: "clusterData.json"
      serviceAccountName: {{ .Values.global.armoServiceAccountName }}
      automountServiceAccountToken: true
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
{{- end }}